<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>等待戈多</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-22T13:44:55.042Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>21pages</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust里的Option和Result</title>
    <link href="http://example.com/2022/01/22/Rust%E9%87%8C%E7%9A%84Option%E5%92%8CResult/"/>
    <id>http://example.com/2022/01/22/Rust%E9%87%8C%E7%9A%84Option%E5%92%8CResult/</id>
    <published>2022-01-22T07:09:14.000Z</published>
    <updated>2022-01-22T13:44:55.042Z</updated>
    
    <content type="html"><![CDATA[<p>Option描述是否存在, Result描述是否错误,是加强版</p><h1 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">    <span class="literal">Some</span>(T),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unwrap系列"><a href="#unwrap系列" class="headerlink" title="unwrap系列"></a>unwrap系列</h2><ul><li><code>unwrap</code>:<code>Some</code>返回T, <code>None</code> panic</li><li><code>unwarp_or</code>:<code>Some</code>返回T, <code>None</code>返回default</li><li><code>unwrap_or_else</code>:<code>Some</code>返回T,<code>None</code>返回调用函数</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unwarp()</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">Some</span>(<span class="string">&quot;air&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.unwrap(), <span class="string">&quot;air&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">Option</span>&lt;&amp;<span class="built_in">str</span>&gt; = <span class="literal">None</span>;</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.unwrap(), <span class="string">&quot;air&quot;</span>); <span class="comment">// fails</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unwrap_or(default:T)</span></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Some</span>(<span class="string">&quot;car&quot;</span>).unwrap_or(<span class="string">&quot;bike&quot;</span>), <span class="string">&quot;car&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">None</span>.unwrap_or(<span class="string">&quot;bike&quot;</span>), <span class="string">&quot;bike&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//unwarp_or_else(F)</span></span><br><span class="line"><span class="keyword">let</span> k = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Some</span>(<span class="number">4</span>).unwrap_or_else(|| <span class="number">2</span> * k), <span class="number">4</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">None</span>.unwrap_or_else(|| <span class="number">2</span> * k), <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h2 id="map系列"><a href="#map系列" class="headerlink" title="map系列"></a>map系列</h2><ul><li><code>map</code>:<code>Some</code>调用函数返回<code>Option&lt;U&gt;</code>, <code>None</code>返回<code>None</code></li><li><code>map_or</code>:<code>Some</code>调用函数返回<code>Option&lt;U&gt;</code>, <code>None</code>返回<code>default&lt;U&gt;</code></li><li><code>map_or_else</code>:<code>Some</code>调用函数返回<code>Option&lt;U&gt;</code>, <code>None</code>调用函数</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map(F)</span></span><br><span class="line"><span class="keyword">let</span> maybe_some_string = <span class="literal">Some</span>(<span class="built_in">String</span>::from(<span class="string">&quot;Hello, World!&quot;</span>));</span><br><span class="line"><span class="keyword">let</span> maybe_some_len = maybe_some_string.map(|s| s.len());</span><br><span class="line"><span class="built_in">assert_eq!</span>(maybe_some_len, <span class="literal">Some</span>(<span class="number">13</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//map_or(default, F)</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">Some</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.map_or(<span class="number">42</span>, |v| v.len()), <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">Option</span>&lt;&amp;<span class="built_in">str</span>&gt; = <span class="literal">None</span>;</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.map_or(<span class="number">42</span>, |v| v.len()), <span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//map_or_else(Fnone, Fsome)</span></span><br><span class="line"><span class="keyword">let</span> k = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">Some</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.map(|| k * <span class="number">2</span>, |v| v.len(), <span class="number">3</span>));</span><br><span class="line"><span class="keyword">let</span> x : <span class="built_in">Option</span>&lt;&amp;<span class="built_in">str</span>&gt; = <span class="literal">None</span>;</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.map(|| k * <span class="number">2</span>, |v| v.len(), <span class="number">42</span>));</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p><code>Some</code>返回<code>T</code>, <code>None</code>直接<code>return None</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">work_phone_area_code</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">u8</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">self</span>.job?.phone_number?.area_code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="and-then"><a href="#and-then" class="headerlink" title="and_then"></a>and_then</h2><p><code>map</code>的函数F返回的是值,<code>and_then</code>的函数返回的是<code>Option&lt;T&gt;</code>, 可以链式调用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">sq</span></span>(x: <span class="built_in">u32</span>) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">u32</span>&gt; &#123; <span class="literal">Some</span>(x * x) &#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">nope</span></span>(_: <span class="built_in">u32</span>) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">u32</span>&gt; &#123; <span class="literal">None</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Some</span>(<span class="number">2</span>).and_then(sq).and_then(sq), <span class="literal">Some</span>(<span class="number">16</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Some</span>(<span class="number">2</span>).and_then(sq).and_then(nope), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter(F), F为true返回<code>Some</code>, F为false返回<code>None</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">is_even</span></span>(n: &amp;<span class="built_in">i32</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    n % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">None</span>.filter(is_even), <span class="literal">None</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Some</span>(<span class="number">3</span>).filter(is_even), <span class="literal">None</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Some</span>(<span class="number">4</span>).filter(is_even), <span class="literal">Some</span>(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">enum</span> <span class="title">Result</span></span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="literal">Ok</span>(T),</span><br><span class="line">    <span class="literal">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unwrap系列-1"><a href="#unwrap系列-1" class="headerlink" title="unwrap系列"></a>unwrap系列</h2><ul><li><code>unwrap</code>:<code>Ok</code>返回<code>T</code>,<code>Err</code> panic</li><li><code>unwrap_or</code>:<code>Ok</code>返回<code>T</code>,<code>Err</code> 返回default</li><li><code>unwrap_or_else</code>:<code>Ok</code>返回<code>T</code>,<code>Err</code> 调用函数</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unwrap</span></span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">Result</span>&lt;<span class="built_in">u32</span>, &amp;<span class="built_in">str</span>&gt; = <span class="literal">Ok</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.unwrap(), <span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">Result</span>&lt;<span class="built_in">u32</span>, &amp;<span class="built_in">str</span>&gt; = <span class="literal">Err</span>(<span class="string">&quot;emergency failure&quot;</span>);</span><br><span class="line">x.unwrap(); <span class="comment">// `emergency failure` 的 panics</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unwarp_or(default)</span></span><br><span class="line"><span class="keyword">let</span> default = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">Result</span>&lt;<span class="built_in">u32</span>, &amp;<span class="built_in">str</span>&gt; = <span class="literal">Ok</span>(<span class="number">9</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.unwrap_or(default), <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//unwrap_or_else(F)</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">count</span></span>(x: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">usize</span> &#123; x.len() &#125;</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Ok</span>(<span class="number">2</span>).unwrap_or_else(count), <span class="number">2</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Err</span>(<span class="string">&quot;foo&quot;</span>).unwrap_or_else(count), <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="map系列-1"><a href="#map系列-1" class="headerlink" title="map系列"></a>map系列</h2><ul><li><p><code>map</code>:<code>Ok</code>值应用函数, <code>Err</code>值返回<code>Err</code></p></li><li><p><code>map_or</code>:<code>Ok</code>值应用函数, <code>Err</code>值返回default</p></li><li><p><code>map_or_else</code>:<code>Ok</code>值应用函数A, <code>Err</code>值应用函数B</p></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line"><span class="keyword">let</span> line = <span class="string">&quot;1\n2\n3\n4\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> line.lines() &#123;</span><br><span class="line">    <span class="keyword">match</span> num.parse::&lt;<span class="built_in">i32</span>&gt;().map(|i| i * <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(n) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, n),</span><br><span class="line">        <span class="literal">Err</span>(..) =&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//map_or(default,F)</span></span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">Result</span>&lt;_, &amp;<span class="built_in">str</span>&gt; = <span class="literal">Ok</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.map_or(<span class="number">42</span>, |v| v.len()), <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">Result</span>&lt;&amp;<span class="built_in">str</span>, _&gt; = <span class="literal">Err</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.map_or(<span class="number">42</span>, |v| v.len()), <span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//map_or_else(Ferr, Fok)</span></span><br><span class="line"><span class="keyword">let</span> k = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">let</span> x : <span class="built_in">Result</span>&lt;_, &amp;<span class="built_in">str</span>&gt; = <span class="literal">Ok</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.map_or_else(|e| k * <span class="number">2</span>, |v| v.len()), <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> x : <span class="built_in">Result</span>&lt;&amp;<span class="built_in">str</span>, _&gt; = <span class="literal">Err</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(x.map_or_else(|e| k * <span class="number">2</span>, |v| v.len()), <span class="number">42</span>);</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title="?"></a>?</h2><p>Err直接返回, Ok返回值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">double_first</span></span>(vec: <span class="built_in">Vec</span>&lt;&amp;<span class="built_in">str</span>&gt;) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> first = vec.first().ok_or(EmptyVec)?;</span><br><span class="line">    <span class="keyword">let</span> parsed = first.parse::&lt;<span class="built_in">i32</span>&gt;()?;</span><br><span class="line">    <span class="literal">Ok</span>(<span class="number">2</span> * parsed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="and-then-1"><a href="#and-then-1" class="headerlink" title="and_then"></a>and_then</h2><p><code>map</code>的函数F返回的是值,<code>and_then</code>的函数返回的是<code>Result&lt;U,E&gt;</code>, 可以链式调用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">sq</span></span>(x: <span class="built_in">u32</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">u32</span>, <span class="built_in">u32</span>&gt; &#123; <span class="literal">Ok</span>(x * x) &#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">err</span></span>(x: <span class="built_in">u32</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">u32</span>, <span class="built_in">u32</span>&gt; &#123; <span class="literal">Err</span>(x) &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Ok</span>(<span class="number">2</span>).and_then(sq).and_then(sq), <span class="literal">Ok</span>(<span class="number">16</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Ok</span>(<span class="number">2</span>).and_then(sq).and_then(err), <span class="literal">Err</span>(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Ok</span>(<span class="number">2</span>).and_then(err).and_then(sq), <span class="literal">Err</span>(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="literal">Err</span>(<span class="number">3</span>).and_then(sq).and_then(sq), <span class="literal">Err</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><h2 id="filter-1"><a href="#filter-1" class="headerlink" title="filter"></a>filter</h2><p>filter(F), F为true返回<code>Ok</code>, F为false返回<code>Err</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strings = <span class="built_in">vec!</span>[<span class="string">&quot;tofu&quot;</span>, <span class="string">&quot;93&quot;</span>, <span class="string">&quot;18&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> numbers: <span class="built_in">Vec</span>&lt;_&gt; = strings</span><br><span class="line">    .into_iter()</span><br><span class="line">    .map(|s| s.parse::&lt;<span class="built_in">i32</span>&gt;())</span><br><span class="line">    <span class="comment">// .filter_map(Result::ok)</span></span><br><span class="line">    <span class="comment">// .collect();</span></span><br><span class="line">    .filter(|s| s.is_ok())</span><br><span class="line">    .collect();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;Results: &#123;:?&#125;&quot;</span>, numbers);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Option描述是否存在, Result描述是否错误,是加强版&lt;/p&gt;
&lt;h1 id=&quot;Option&quot;&gt;&lt;a href=&quot;#Option&quot; class=&quot;headerlink&quot; title=&quot;Option&quot;&gt;&lt;/a&gt;Option&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="Rust" scheme="http://example.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust里的那些函数</title>
    <link href="http://example.com/2022/01/22/Rust%E9%87%8C%E7%9A%84%E9%82%A3%E4%BA%9B%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2022/01/22/Rust%E9%87%8C%E7%9A%84%E9%82%A3%E4%BA%9B%E5%87%BD%E6%95%B0/</id>
    <published>2022-01-22T03:18:50.000Z</published>
    <updated>2022-01-22T03:26:06.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="take"><a href="#take" class="headerlink" title="take"></a>take</h1><p>取迭代器里的最多前几个元素</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> iter = a.iter().take(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.next(), <span class="literal">Some</span>(&amp;<span class="number">1</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.next(), <span class="literal">Some</span>(&amp;<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.next(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure><h1 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h1><p>跳过迭代器的几个元素</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> iter = a.iter().skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.next(), <span class="literal">Some</span>(&amp;<span class="number">3</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.next(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;take&quot;&gt;&lt;a href=&quot;#take&quot; class=&quot;headerlink&quot; title=&quot;take&quot;&gt;&lt;/a&gt;take&lt;/h1&gt;&lt;p&gt;取迭代器里的最多前几个元素&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
    <category term="Rust" scheme="http://example.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust助记</title>
    <link href="http://example.com/2022/01/22/Rust%E5%8A%A9%E8%AE%B0/"/>
    <id>http://example.com/2022/01/22/Rust%E5%8A%A9%E8%AE%B0/</id>
    <published>2022-01-22T02:07:58.000Z</published>
    <updated>2022-01-24T13:19:49.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dyn"><a href="#dyn" class="headerlink" title="dyn"></a>dyn</h1><p>修饰trait, 用于动态分发, 不同于泛型编译时</p><ul><li>trait做返回值</li></ul><p>rust返回值的大小必须是确定的,trait大小不确定</p><p>可以返回<code>Box &lt;dyn traitA&gt; </code>, 也可以返回<code>impl traitA</code></p><ul><li>trait做参数绑定</li></ul><p><code>a:&amp;dyn traitA</code></p><h1 id="Copy-Clone-to-owned"><a href="#Copy-Clone-to-owned" class="headerlink" title="Copy, Clone ,to_owned"></a>Copy, Clone ,to_owned</h1><p>Copy:用于=, 传参, 返回值, 编译器不再move,就像int</p><p>Clone:手动调用clone()复制对象</p><p>to_owned()函数常常调用clone()</p><h1 id="三种iterator"><a href="#三种iterator" class="headerlink" title="三种iterator"></a>三种iterator</h1><ul><li><p><code>iter</code>返回<code>&amp;T</code></p></li><li><p><code>iter_mut</code> 返回<code>&amp;mut T</code></p></li><li><p><code>into_iter</code> 返回<code>T</code></p></li></ul><h1 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h1><p>值默认分配在栈上, <code>Box::new()</code>分配到堆上, 是一种智能指针</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;dyn&quot;&gt;&lt;a href=&quot;#dyn&quot; class=&quot;headerlink&quot; title=&quot;dyn&quot;&gt;&lt;/a&gt;dyn&lt;/h1&gt;&lt;p&gt;修饰trait, 用于动态分发, 不同于泛型编译时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trait做返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rus</summary>
      
    
    
    
    
    <category term="Rust" scheme="http://example.com/tags/Rust/"/>
    
  </entry>
  
</feed>
